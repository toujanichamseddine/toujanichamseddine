package com.calyon.espm.service;

import com.calyon.dsi.common.log.Log;
import com.calyon.dsi.common.log.LogFactory;
import com.calyon.espm.model.SAMLUser;
import com.calyon.espm.security.SAMLAuthenticationManager;
import org.opensaml.saml2.core.Attribute;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.saml.SAMLCredential;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Service pour gérer les opérations liées à l'authentification SAML
 * et fournir des informations utilisateur au frontend
 */
@Named
public class AuthenticationService {

    private static final Log log = LogFactory.getLog(AuthenticationService.class);

    @Inject
    private SAMLAuthenticationManager authenticationManager;

    /**
     * Récupère les informations de l'utilisateur actuellement authentifié
     * @return Map contenant les informations utilisateur ou null si non authentifié
     */
    public Map<String, Object> getCurrentUserInfo() {
        SAMLUser user = authenticationManager.getCurrentUser();
        if (user == null) {
            return null;
        }

        Map<String, Object> userInfo = new HashMap<>();
        userInfo.put("username", user.getUsername());
        userInfo.put("email", user.getEmail());
        userInfo.put("utCode", user.getUtCode());
        userInfo.put("roles", user.getRoles());
        userInfo.put("authenticated", true);

        // Ajouter les attributs SAML si disponibles
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.getCredentials() instanceof SAMLCredential) {
            SAMLCredential credential = (SAMLCredential) auth.getCredentials();
            Map<String, String> samlAttributes = new HashMap<>();
            
            // Accéder directement aux attributs via la liste d'attributs
            List<Attribute> attributes = credential.getAttributes();
            if (attributes != null) {
                for (Attribute attribute : attributes) {
                    String name = attribute.getName();
                    String value = credential.getAttributeAsString(name);
                    samlAttributes.put(name, value);
                }
            }
            
            userInfo.put("samlAttributes", samlAttributes);
        }

        return userInfo;
    }

    /**
     * Vérifie si l'utilisateur est authentifié
     * @return true si l'utilisateur est authentifié, false sinon
     */
    public boolean isAuthenticated() {
        return authenticationManager.isAuthenticated();
    }

    /**
     * Vérifie si l'utilisateur a un rôle spécifique
     * @param role Le rôle à vérifier
     * @return true si l'utilisateur a le rôle, false sinon
     */
    public boolean hasRole(String role) {
        return authenticationManager.hasRole(role);
    }

    /**
     * Récupère l'URL de redirection pour l'authentification SAML
     * @return L'URL de redirection
     */
    public String getSamlLoginUrl() {
        return "/saml/login";
    }

    /**
     * Récupère l'URL de redirection pour la déconnexion SAML
     * @return L'URL de redirection
     */
    public String getSamlLogoutUrl() {
        return "/saml/logout";
    }
}
