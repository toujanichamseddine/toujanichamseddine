âœ… STEP 1: Add Swagger/OpenAPI Dependencies
Add this to your pom.xml:

xml
Copier
Modifier
<dependency>
    <groupId>io.swagger.core.v3</groupId>
    <artifactId>swagger-jaxrs2</artifactId>
    <version>2.2.15</version>
</dependency>

<dependency>
    <groupId>io.swagger.core.v3</groupId>
    <artifactId>swagger-jaxrs2-servlet-initializer-v2</artifactId>
    <version>2.2.15</version>
</dependency>

<dependency>
    <groupId>jakarta.ws.rs</groupId>
    <artifactId>jakarta.ws.rs-api</artifactId>
    <version>2.1.6</version>
</dependency>
These are compatible with Java 1.8 and JAX-RS 2.x.

âœ… STEP 2: Create Swagger Configuration Class
java
Copier
Modifier
package com.example.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/api") // Base path for REST API
@OpenAPIDefinition(
    info = @Info(
        title = "My REST API",
        version = "1.0",
        description = "Auto-generated docs for your JAX-RS endpoints"
    )
)
public class RestApplication extends Application {
}
You must extend javax.ws.rs.core.Application and annotate with @ApplicationPath.

âœ… STEP 3: Annotate Your Resource Classes
Example:

java
Copier
Modifier
package com.example.resources;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import io.swagger.v3.oas.annotations.Operation;

@Path("/users")
public class UserResource {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Operation(summary = "List users", description = "Returns a list of all users")
    public Response listUsers() {
        return Response.ok("[{\"name\": \"Alice\"}]").build();
    }
}
âœ… STEP 4: Add Swagger Servlet to web.xml
Swagger needs to serve its OpenAPI documentation. Add this to WEB-INF/web.xml:

xml
Copier
Modifier
<servlet>
    <servlet-name>OpenApiServlet</servlet-name>
    <servlet-class>io.swagger.v3.oas.integration.servlet.OpenApiServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>OpenApiServlet</servlet-name>
    <url-pattern>/openapi</url-pattern>
</servlet-mapping>
This exposes the OpenAPI JSON at /openapi

âœ… STEP 5: Optional â€“ Serve Swagger UI
You can download the Swagger UI dist and:

Place its static files in src/main/webapp/swagger-ui/

Edit index.html:

html
Copier
Modifier
const ui = SwaggerUIBundle({
  url: "/openapi",
  dom_id: '#swagger-ui',
  ...
});
Access Swagger UI in browser:
ðŸ‘‰ http://localhost:8080/your-app/swagger-ui/index.html

âœ… STEP 6: Rebuild and Deploy
bash
Copier
Modifier
mvn clean package
# deploy target/*.war to WildFly or your servlet container
Then access:

ðŸ“„ OpenAPI JSON: http://localhost:8080/your-app/openapi

ðŸ§ª Swagger UI: http://localhost:8080/your-app/swagger-ui/index.html

âœ… Bonus: Auto Scan All REST Classes
If you're registering JAX-RS resources manually, make sure all annotated @Path classes are discovered via your RestApplication subclass (or registered manually if needed).

Would you like me to generate a working Maven sample project with this setup that you can unzip and run directly?
