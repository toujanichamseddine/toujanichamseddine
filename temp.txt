package com.calyon.espm.security;

import com.calyon.espm.model.SAMLUser;
import com.calyon.espm.util.ServletUtils;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;

import com.calyon.dsi.common.log.Log;
import com.calyon.dsi.common.log.LogFactory;

import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class SAMLDetailsService implements SAMLUserDetailsService {

    private static final Log log = LogFactory.getLog(SAMLDetailsService.class);


    @Override
    public SAMLUser loadUserBySAML(SAMLCredential credential) throws UsernameNotFoundException {
        String utCode = credential.getNameID().getValue();
        String given_name = credential.getAttributeAsString("given_name");
        String family_name = credential.getAttributeAsString("family_name");
        String email = credential.getAttributeAsString("Email");
        String role = credential.getAttributeAsString("Role");
        String name = credential.getAttributeAsString("given_name") + " " +
                credential.getAttributeAsString("family_name");

        // Store user data in session
        HttpSession session = ServletUtils.getCurrentSession();
        if (session != null) {
            session.setAttribute("utCode", utCode);
            session.setAttribute("name", name);
            session.setAttribute("given_name", given_name);
            session.setAttribute("family_name", family_name);
            session.setAttribute("email", email);
            session.setAttribute("role", role);
        }

        log.info(" name = " + name);

        //Setting Profiles from SAML response
        String[] profile = credential.getAttributeAsStringArray("authorizations");
        List<GrantedAuthority> authorities = new ArrayList<>();
        for (String s : profile) {
            if (s != null) {
                log.info("author = " + s);
                authorities.add(new SimpleGrantedAuthority(s));
            }
        }

        List<String> roles = authorities.stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toList());

        return new SAMLUser(name,email,roles);
    }
}
