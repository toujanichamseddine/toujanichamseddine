also the angular component and the service


ChatGPT a dit¬†:
Sure! Below is the complete Angular login component and service that integrates with your SAML backend /login endpoint.

‚úÖ 1. Login Component (login.component.ts)
typescript
Copier
Modifier
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    this.authService.login(this.username, this.password).subscribe({
      next: (response) => {
        console.log('Login successful:', response);
        sessionStorage.setItem('user', JSON.stringify(response)); // Store user session
        this.router.navigate(['/home']); // Redirect to home page
      },
      error: (error) => {
        console.error('Login error:', error);
        this.errorMessage = 'Invalid username or password';
      }
    });
  }
}
‚úÖ 2. Auth Service (auth.service.ts)
This service handles authentication and interacts with the backend.

typescript
Copier
Modifier
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loginUrl = '/login'; // Backend login endpoint

  constructor(private http: HttpClient) {}

  login(username: string, password: string): Observable<any> {
    const credentials = { username, password };
    return this.http.post(this.loginUrl, credentials, { withCredentials: true });
  }

  logout() {
    sessionStorage.removeItem('user'); // Remove user session
  }

  isLoggedIn(): boolean {
    return sessionStorage.getItem('user') !== null;
  }
}
‚úÖ 3. Update app.module.ts
Ensure HttpClientModule is imported.

typescript
Copier
Modifier
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
‚úÖ 4. Protect Routes with Auth Guard (auth.guard.ts)
To restrict access to pages if the user is not logged in, create an AuthGuard.

typescript
Copier
Modifier
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (!this.authService.isLoggedIn()) {
      this.router.navigate(['/login']); // Redirect to login if not logged in
      return false;
    }
    return true;
  }
}
‚úÖ 5. Secure Routes (app.routes.ts)
Modify the routes to protect the home page.

typescript
Copier
Modifier
import { Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { HomeComponent } from './home/home.component';
import { AuthGuard } from './services/auth.guard';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] }, // Protected route
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: '**', redirectTo: 'login' }
];
üöÄ Now Your Angular Login Works with SAML Authentication!
1Ô∏è‚É£ User enters credentials and submits.
2Ô∏è‚É£ The app sends a request to /login.
3Ô∏è‚É£ If successful, the user is redirected to /home.
4Ô∏è‚É£ Unauthenticated users are redirected to /login when trying to access protected routes.

Let me know if you need more improvements! üòä







Vous avez dit¬†:
in angular separate the component and the service in differents files


ChatGPT a dit¬†:
Sure! Below is the Angular login system with the component and service in separate files.

‚úÖ 1. Login Component (login.component.ts)
This is responsible for handling the user interface and calling the authentication service.

typescript
Copier
Modifier
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  username: string = '';
  password: string = '';
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    this.authService.login(this.username, this.password).subscribe({
      next: (response) => {
        console.log('Login successful:', response);
        sessionStorage.setItem('user', JSON.stringify(response)); // Store user session
        this.router.navigate(['/home']); // Redirect to home page
      },
      error: (error) => {
        console.error('Login error:', error);
        this.errorMessage = 'Invalid username or password';
      }
    });
  }
}
‚úÖ 2. Login UI (login.component.html)
A Bootstrap-styled login form.

html
Copier
Modifier
<div class="container d-flex justify-content-center align-items-center vh-100">
  <div class="card shadow-lg p-4" style="width: 400px;">
    <h3 class="text-center text-primary">Login</h3>
    
    <form (submit)="onSubmit()">
      <!-- Username -->
      <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <input type="text" class="form-control" id="username" [(ngModel)]="username" required>
      </div>

      <!-- Password -->
      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" [(ngModel)]="password" required>
      </div>

      <!-- Submit Button -->
      <button type="submit" class="btn btn-primary w-100">Login</button>
    </form>

    <!-- Error Message -->
    <div *ngIf="errorMessage" class="alert alert-danger mt-3">
      {{ errorMessage }}
    </div>
  </div>
</div>
‚úÖ 3. Authentication Service (auth.service.ts)
Handles API calls for authentication.

typescript
Copier
Modifier
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loginUrl = '/login'; // Backend login endpoint

  constructor(private http: HttpClient) {}

  login(username: string, password: string): Observable<any> {
    const credentials = { username, password };
    return this.http.post(this.loginUrl, credentials, { withCredentials: true });
  }

  logout() {
    sessionStorage.removeItem('user'); // Remove user session
  }

  isLoggedIn(): boolean {
    return sessionStorage.getItem('user') !== null;
  }
}
‚úÖ 4. Protect Routes with Auth Guard (auth.guard.ts)
Restricts access to protected pages.

typescript
Copier
Modifier
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (!this.authService.isLoggedIn()) {
      this.router.navigate(['/login']); // Redirect to login if not logged in
      return false;
    }
    return true;
  }
}
‚úÖ 5. Configure Routes (app.routes.ts)
Defines the application's routes.

typescript
Copier
Modifier
import { Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { HomeComponent } from './home/home.component';
import { AuthGuard } from './services/auth.guard';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] }, // Protected route
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: '**', redirectTo: 'login' }
];
‚úÖ 6. Update app.module.ts
Make sure HttpClientModule and FormsModule are imported.

typescript
Copier
Modifier
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
üöÄ Final Steps
1Ô∏è‚É£ Install Bootstrap (if not installed)

sh
Copier
Modifier
npm install bootstrap @popperjs/core
Then, add Bootstrap in angular.json:

json
Copier
Modifier
"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css"
],
"scripts": [
  "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
]
2Ô∏è‚É£ Restart Angular

sh
Copier
Modifier
ng serve
3Ô∏è‚É£ Now your Angular login page works with authentication! üéØ
Let me know if you need further improvements. üòä
