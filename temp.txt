Sure! Here's a minimal example of using Chart.js in an Angular project without any wrapper libraries, just pure Chart.js.

✅ Step 1: Install Chart.js
bash
Copier
Modifier
npm install chart.js
✅ Step 2: Create a chart component
chart.component.ts
ts
Copier
Modifier
import { Component, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { Chart } from 'chart.js/auto';

@Component({
  selector: 'app-chart',
  templateUrl: './chart.component.html',
  styleUrls: ['./chart.component.css']
})
export class ChartComponent implements AfterViewInit {
  @ViewChild('myChart') myChartRef!: ElementRef;

  ngAfterViewInit() {
    const ctx = this.myChartRef.nativeElement;

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green'],
        datasets: [{
          label: 'Votes',
          data: [12, 19, 3, 5],
          backgroundColor: ['red', 'blue', 'yellow', 'green']
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top'
          },
          title: {
            display: true,
            text: 'Simple Bar Chart'
          }
        }
      }
    });
  }
}
✅ Step 3: Chart HTML
chart.component.html
html
Copier
Modifier
<canvas #myChart width="400" height="200"></canvas>
✅ Step 4: Add to your module
Make sure to declare the component in your module and use <app-chart></app-chart> where you want to display the chart.

Let me know if you want a different chart type (line, pie, etc.), dynamic data, or multiple charts!
