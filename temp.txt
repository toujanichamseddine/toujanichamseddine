1. Fix login() in auth.service.ts
Modify your AuthService to call the backend SAML authentication endpoint.

âœ… Corrected auth.service.ts
typescript
Copier
Modifier
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConfigService } from './config.service';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private backendUrl: string = '';

  constructor(private http: HttpClient, private configService: ConfigService, private router: Router) {
    this.configService.loadConfig().subscribe(config => {
      this.backendUrl = `http://${config.backend.host}:${config.backend.port}`;
    });
  }

  // Call backend SAML authentication API
  login(): Observable<any> {
    return this.http.get(`${this.backendUrl}/saml/login`, { withCredentials: true });
  }

  // Check if user is logged in
  isLoggedIn(): boolean {
    return typeof window !== 'undefined' && sessionStorage.getItem('user') !== null;
  }

  // Store user session after login
  storeUserSession(userData: any): void {
    sessionStorage.setItem('user', JSON.stringify(userData));
  }

  // Logout function
  logout(): void {
    sessionStorage.removeItem('user');
    this.router.navigate(['/login']);
  }
}
2. Call the login() Function from LoginComponent
Modify your login.component.ts file to properly call the backend and store user session.

âœ… Corrected login.component.ts
typescript
Copier
Modifier
import { Component } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: true,
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
  imports: [ /* Import necessary Angular modules */ ]
})
export class LoginComponent {

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    this.authService.login().subscribe({
      next: (response) => {
        this.authService.storeUserSession(response);
        this.router.navigate(['/home']); // Redirect to home after login
      },
      error: (err) => {
        console.error('Login failed:', err);
      }
    });
  }
}
3. Update config.json for Backend URL
Ensure your config.json file contains the backend host and port:

âœ… src/assets/config.json
json
Copier
Modifier
{
  "backend": {
    "host": "localhost",
    "port": 8080
  }
}
4. How the Flow Works Now
User clicks "Login" in the frontend.

Angular calls the backend SAML login API (http://localhost:8080/saml/login).

Backend handles authentication and returns user session data.

User session is stored in sessionStorage.

User is redirected to /home where session info is displayed.

Why This Fix Works
âœ… Calls the Backend Instead of Navigating to /login on the Frontend
âœ… Uses ConfigService for Dynamic Backend URL
âœ… Stores User Session Securely in sessionStorage
âœ… Redirects to /home After Successful Login

Let me know if you need further improvements! ðŸš€
