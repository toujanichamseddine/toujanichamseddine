import { Component, OnInit, OnDestroy, Inject, PLATFORM_ID } from '@angular/core';
import { Router } from '@angular/router';
import { isPlatformBrowser } from '@angular/common';

@Component({
  selector: 'app-loading',
  templateUrl: './loading.component.html',
  styleUrls: ['./loading.component.css']
})
export class LoadingComponent implements OnInit, OnDestroy {
  private progressValue: number = 0;
  private progressInterval: any;
  private redirectTimer: any;
  private isBrowser: boolean;

  constructor(
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
    this.startProgressBar();
    this.setupRedirect();
    
    if (this.isBrowser) {
      this.createParticles();
    }
  }

  ngOnDestroy(): void {
    if (this.progressInterval) {
      clearInterval(this.progressInterval);
    }
    if (this.redirectTimer) {
      clearTimeout(this.redirectTimer);
    }
  }

  startProgressBar(): void {
    this.progressInterval = setInterval(() => {
      this.progressValue += 1;
      if (this.progressValue >= 100) {
        clearInterval(this.progressInterval);
      }
    }, 50);
  }

  setupRedirect(): void {
    this.redirectTimer = setTimeout(() => {
      this.router.navigate(['/home']);
    }, 5000);
  }

  createParticles(): void {
    if (!this.isBrowser) return;
    
    const particlesContainer = document.getElementById('particles');
    if (!particlesContainer) return;

    const particlesCount = 30;
    
    for (let i = 0; i < particlesCount; i++) {
      const particle = document.createElement('div');
      particle.classList.add('particle');
      
      const size = Math.random() * 20 + 5;
      const posX = Math.random() * 100;
      const delay = Math.random() * 15;
      
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      particle.style.left = `${posX}vw`;
      particle.style.bottom = `-${size}px`;
      particle.style.animationDelay = `${delay}s`;
      
      particlesContainer.appendChild(particle);
    }
  }

  getProgressBarWidth(): string {
    return `${this.progressValue}%`;
  }
}